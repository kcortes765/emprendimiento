"""mock_data.py
Genera datos simulados para rutas, comercios y usuarios.
"""
from __future__ import annotations

from faker import Faker
import random

fake = Faker("es_CL")

# ---------------------- Nombres de calles reales (Antofagasta) ---------

AVENIDAS_ANTOFAGASTA = [
    "Avenida Edmundo P√©rez Zujovic",
    "Avenida S√©ptimo de L√≠nea",
    "Avenida An√≠bal Pinto",
    "Avenida Jos√© Manuel Balmaceda",
    "Avenida Grecia",
    "Avenida Rep√∫blica de Croacia",
    "Avenida Ej√©rcito",
    "Avenida Jaime Guzm√°n",
    "Avenida Padre Alberto Hurtado",
    "Avenida Argentina"
]

# ---------------------- Comercios asociados -------------------------------

COMERCIOS = [
    {"nombre": "L√≠der", "logo": "üõí", "puntos_necesarios": 500},
    {"nombre": "Servipag", "logo": "üí≥", "puntos_necesarios": 300},
    {"nombre": "Cinemark", "logo": "üé¨", "puntos_necesarios": 700},
    {"nombre": "Juan Valdez", "logo": "‚òï", "puntos_necesarios": 200},
]

# ---------------------- Rutas simuladas -----------------------------------

ROUTES = [] # Ser√° poblado por la nueva funci√≥n

def generate_routes(n: int = 20):
    """Lista de rutas con origen, destino y distancia aproximada, usando nombres reales."""
    routes = []
    for _ in range(n):
        origen = random.choice(AVENIDAS_ANTOFAGASTA)
        # Asegurarse de que el destino no sea el mismo que el origen para m√°s realismo
        destino_options = [av for av in AVENIDAS_ANTOFAGASTA if av != origen]
        if not destino_options: # En caso de que solo haya una avenida (poco probable aqu√≠)
            destino = origen
        else:
            destino = random.choice(destino_options)
        
        distancia = round(random.uniform(2, 15), 1)
        routes.append({"origen": origen, "destino": destino, "dist_km": distancia})
    return routes

ROUTES = generate_routes()
